#!/usr/bin/env python3
"""
Script d'installation pour NEUROPLAST-ANN Model Loader
"""

import subprocess
import sys
import os
from pathlib import Path

def install_requirements():
    """Installer les d√©pendances"""
    print("üîß Installation des d√©pendances...")
    
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur installation: {e}")
        return False

def test_installation():
    """Tester l'installation"""
    print("üß™ Test de l'installation...")
    
    try:
        import tensorflow as tf
        import numpy as np
        import pandas as pd
        import matplotlib
        import matplotlib.pyplot as plt
        import seaborn as sns
        import sklearn
        import h5py
        import colorama
        
        print(f"‚úÖ TensorFlow: {tf.__version__}")
        print(f"‚úÖ NumPy: {np.__version__}")
        print(f"‚úÖ Pandas: {pd.__version__}")
        print(f"‚úÖ Matplotlib: {matplotlib.__version__}")
        print(f"‚úÖ Scikit-learn: {sklearn.__version__}")
        print("‚úÖ Toutes les d√©pendances sont install√©es")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        return False

def create_test_script():
    """Cr√©er un script de test rapide"""
    test_script = """#!/usr/bin/env python3
# Test rapide du Model Loader
import sys
sys.path.append('.')

try:
    from model_loader import NeuroplastModelLoader
    print("‚úÖ Model Loader import√© avec succ√®s")
    
    loader = NeuroplastModelLoader()
    print("‚úÖ Loader initialis√©")
    
    if loader.model_directories:
        print(f"‚úÖ {len(loader.model_directories)} r√©pertoires de mod√®les trouv√©s")
    else:
        print("‚ö†Ô∏è Aucun mod√®le trouv√© - ex√©cutez d'abord NEUROPLAST-ANN")
    
except Exception as e:
    print(f"‚ùå Erreur: {e}")
"""
    
    with open("test_installation.py", "w") as f:
        f.write(test_script)
    
    print("‚úÖ Script de test cr√©√©: test_installation.py")

def main():
    """Fonction principale"""
    print("üöÄ Installation NEUROPLAST-ANN Model Loader v4.3")
    print("=" * 50)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path("requirements.txt").exists():
        print("‚ùå Fichier requirements.txt non trouv√©")
        print("   Assurez-vous d'√™tre dans le r√©pertoire load_model/")
        return
    
    # Installer les d√©pendances
    if not install_requirements():
        print("‚ùå √âchec de l'installation")
        return
    
    # Tester l'installation
    if not test_installation():
        print("‚ùå √âchec du test")
        return
    
    # Cr√©er le script de test
    create_test_script()
    
    print("\nüéâ Installation termin√©e avec succ√®s !")
    print("\nüìã Prochaines √©tapes:")
    print("1. Ex√©cutez NEUROPLAST-ANN pour cr√©er des mod√®les:")
    print("   cd ..")
    print("   ./neuroplast-ann --config config/cancer_simple.yml --test-all")
    print("\n2. Testez le chargement des mod√®les:")
    print("   python3 model_loader.py")
    print("\n3. Ou testez un mod√®le sp√©cifique:")
    print("   python3 test_specific_model.py ../best_models_neuroplast_cancer/model_1.h5")

if __name__ == "__main__":
    main() 